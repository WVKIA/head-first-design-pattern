观察者模式：（又叫发布-订阅模式）
    定义了对象之间的一对多的依赖，当一个对象改变状态时，它的所有依赖者都会收到通知并自动更新

    主要角色：
        Subject：主题
        ConcreteSubject：具体主题

            主题会保存一份所有观察者的集合，每个主题都可以有任何数量的观察者，
            主题会提供一个接口，可以增加、删除观察者

        Observer：观察者
        ConcreteObserver：具体观察者
            观察者会有一个接口（例如update），供主题进行调用，表明自己更新状态的行为

     存在推、拉模型

    推模型：
        //观察者
        interface Observer{
            void update(T param...);    //根据状态的改变更新自身行为
        }
        //主题，管理状态和观察者
        abstract class Subject{
            list <Observer> oblist; //保存观察者的集合引用，所有的观察者

            void add(Observer o){
                list.add(o) //添加一个观察者
             }
             void delete(Observer o){
                list.remove(o); //删除一个观察者
             }

             void modifyOb(T ...param){
                for(Observer o : list){
                    o.update();     //通知所有注册的观察者
                }
             }
        }
     推模型：
        主题对象向观察者推送详细信息，不管观察者是否需要，推送的往往是主题的全部或部分数据

     拉模型：
        //观察者
        interface Observer{
            void update(Subject subject);   //  注意这里，这个是将主题对象发送给观察者，让观察者自己从主题对象获取数据
        }

        abstract class Subject{
             list <Observer> oblist; //保存观察者的集合引用，所有的观察者

            void add(Observer o){
                list.add(o) //添加一个观察者
             }
             void delete(Observer o){
                list.remove(o); //删除一个观察者
             }

             void modifyOb(T ...param){
                for(Observer o : list){
                    o.update( this );     //通知所有注册的观察者，将自身引用推送过去
                }
             }
        }





