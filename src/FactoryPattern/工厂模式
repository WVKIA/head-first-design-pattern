1、简单工厂模式
    abstruct Base{}
    A extends Base{}
    B extends Base{}
    public static Base create(type){
        if(type == A){
            return new A
        }
        if(type == B){
            return new {}
        }
    }

    优点：
        通过参数就可以创建对象，简单
        可以通过配置文件的形式，代替 参数的判断

     缺点：
        只能适用于少量类，多的话不利于维护
        使用静态方法，不利于继承


2、工厂模式
    工厂模式定义创建对象的接口，但由子类决定要实例化哪一个，让类把实例化推迟到子类

    抽象产品
    具体产品
    抽象工厂
    具体工厂
    abstract/interface product{}
    class A extends product{}
    class B extends product{}

    inteface/abstract Factory{
        product create();
    }
    //将实例化对象延迟到子类工厂
    class AFactory extends Factory{
        product create(){
            return new A;
        }
    }
    class BFactory extends Factory{
        product create(){
            return new B;
        }
    }
    但注意，此时具体产品和具体工厂进行绑定了

    优点是实例化延迟到子类，扩展性好，符合开闭原则
    缺点是工程类和产品类进行了绑定，增加新的产品会成对增加类，对于很多产品容易类很多

    3、抽象工厂模式
        针对工厂模式的缺点引入了抽象工厂模式
        抽象工厂模式中，产品等级和工厂等级平级，而且相互分开，不再进行具体实现绑定

        等级和产品族
            等级是大的概念
            产品族是等级的具体实现


        主要角色
        AbstractFactory     抽象工厂
        ConcreteFactory     具体工厂
        AbstractProduct     抽象产品
        Product                     具体产品

        //等级抽象类
        interface ProductA{}
        interface ProductB{}
        //产品族具体实现
        ProductA_1 implements ProductA{}
        ProductA_2 implements ProductA{}
        //
        ProductB_1 implements ProductB{}
        ProductB_2 implements ProductB{}

        //抽象工厂
        interface Factory{
            ProductA createProductA{}
            ProductB createProductB{}
        }

        //抽象工厂实现类
        //注意此时的 绑定关系是  两个等级之间的绑定
        class FactoryIm_1 implements Factory{
            ProductA createProductA{
                return productA_1
            }
            ProductB createProductB{
                return productB_1
            }
        }

        优点是可以创建相互关联的产品族
        缺点是扩展将很困难，需要修改源码
